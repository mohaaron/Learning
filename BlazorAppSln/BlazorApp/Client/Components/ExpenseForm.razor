

<h3>Expense Form</h3>

<EditForm Model="validate" OnValidSubmit="@Save">
  <DataAnnotationsValidator />
  <ValidationSummary />

  <div class="container">
    <div class="row">
      <div class="col-auto">
        <label class="col-form-label">Name</label>
      </div>
      <div class="col-auto"><InputText @bind-Value="validate.ExpenseName" /></div>
    </div>
    <div class="row">
      <div class="col-auto">
        <label class="col-form-label">Cost</label>
      </div>
      <div class="col-auto"><InputNumber @bind-Value="validate.Cost" /></div>
    </div>
    <div class="row">
      <div class="col-auto">
        <label class="col-form-label">Due Date</label>
      </div>
      <div class="col-auto"><InputDate @bind-Value="validate.DueDate" /></div>
    </div>
    <div class="row">
      <div class="col-auto">
        <label class="col-form-label">Notes</label>
      </div>
      <div class="col-auto"><InputText @bind-Value="validate.Notes" /></div>
    </div>
    <div class="row">
        <div class="col-auto"><button class="form-control">Save</button></div>
        <div class="col-auto"><button class="form-control" @onclick="Cancel">Cancel</button></div>
    </div>
  </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public Expense expense { get; set; } = new();

    private Expense validate { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
      if (expense is not null)
      {
          // Load validation entity for edit
          validate.Id = expense.Id;
          validate.ExpenseName = expense.ExpenseName;
          validate.Cost = expense.Cost;
          validate.Notes = expense.Notes;
      }

      return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
      return base.OnParametersSetAsync();
    }

    async Task Save()
    {
      expense.Id = validate.Id;
      expense.ExpenseName = validate.ExpenseName;
      expense.Cost = validate.Cost;
      expense.Notes = validate.Notes;

      await BlazoredModal.CloseAsync(ModalResult.Ok<Expense>(expense));
    }

    async Task Cancel() => await BlazoredModal.CancelAsync();
}
